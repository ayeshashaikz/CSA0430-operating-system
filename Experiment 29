#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>

sem_t forks[5];

void* philosopher(void* num) {
    int id = *(int*)num;
    printf("Philosopher %d is thinking\n", id);
    sem_wait(&forks[id]);
    sem_wait(&forks[(id+1)%5]);
    printf("Philosopher %d is eating\n", id);
    sleep(1);
    printf("Philosopher %d finished eating\n", id);
    sem_post(&forks[id]);
    sem_post(&forks[(id+1)%5]);
    return NULL;
}

int main() {
    pthread_t t[5];
    int ids[5];
    for(int i=0;i<5;i++) sem_init(&forks[i],0,1);
    for(int i=0;i<5;i++){
        ids[i]=i;
        pthread_create(&t[i],NULL,philosopher,&ids[i]);
    }
    for(int i=0;i<5;i++) pthread_join(t[i],NULL);
    for(int i=0;i<5;i++) sem_destroy(&forks[i]);
    return 0;
}

Sample output:
Philosopher 0 is thinking
Philosopher 1 is thinking
...
Philosopher 2 is eating
...

