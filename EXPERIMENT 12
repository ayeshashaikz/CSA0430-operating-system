#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t forks[5];

void* philosopher(void* num) {
    int id = *(int*)num;
    printf("Philosopher %d is thinking\n", id);
    sem_wait(&forks[id]);
    sem_wait(&forks[(id+1)%5]);

    printf("Philosopher %d is eating\n", id);
    sleep(2);

    sem_post(&forks[id]);
    sem_post(&forks[(id+1)%5]);
    printf("Philosopher %d finished eating\n", id);
    return NULL;
}

int main() {
    pthread_t phil[5];
    int i, ids[5];
    for(i = 0; i < 5; i++)
        sem_init(&forks[i], 0, 1);

    for(i = 0; i < 5; i++) {
        ids[i] = i;
        pthread_create(&phil[i], NULL, philosopher, &ids[i]);
    }

    for(i = 0; i < 5; i++)
        pthread_join(phil[i], NULL);

    return 0;
}
OUTPUT:
Philosopher 0 is thinking
Philosopher 3 is thinking
Philosopher 3 is eating
Philosopher 1 is thinking
Philosopher 0 is eating
Philosopher 4 is thinking
Philosopher 2 is thinking
Philosopher 0 finished eating
Philosopher 3 finished eating
Philosopher 4 is eating
Philosopher 2 is eating
Philosopher 2 finished eating
Philosopher 1 is eating
Philosopher 4 finished eating
Philosopher 1 finished eating


=== Code Execution Successful ===
